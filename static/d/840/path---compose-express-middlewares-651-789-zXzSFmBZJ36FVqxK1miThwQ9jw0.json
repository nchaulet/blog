{"data":{"markdownRemark":{"html":"<p>Function composition is a great tool, to allow to create a more isolated function with clear responsibility and single purpose. Function composition allows combining these functions to create a more complex one.</p>\n<p>This pattern can also be used to express middlewares. This allows having more isolated middlewares, easier to test. And to expose a composed middleware that can guarantee that a middleware is going to be called after another one.</p>\n<pre><code>const express = require('express');\n\nfunction middleware1(req, res, next) {\n  req.var1 = logic1();\n}\nfunction middleware2(req, res, next) {\n  req.var2 = logic2(req.var1);\n}\nfunction middleware3(req, res, next) {\n  req.var3 = logic3(req.var1, req.vqr2);\n}\n\nconst myFinalMiddleware = express.Router().use(middleware1, middleware2, middleware3);\n</code></pre>\n<p>And you can use your middleware after like any other middleware</p>\n<pre><code>const app = express();\napp.use(myFinalMiddleware);\n</code></pre>\n<p>This tips allow you to have thinner middleware with single responsability.</p>","frontmatter":{"date":"2018-10-30","path":"/compose-express-middlewares","title":"Compose express middlewares"}}},"pageContext":{}}