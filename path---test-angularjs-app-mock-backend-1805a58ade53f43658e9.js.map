{"version":3,"sources":["webpack:///path---test-angularjs-app-mock-backend-1805a58ade53f43658e9.js","webpack:///./.cache/json/test-angularjs-app-mock-backend.json"],"names":["webpackJsonp","347","module","exports","data","markdownRemark","html","frontmatter","date","path","title","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,s5FAA0hFC,aAAkZC,KAAA,aAAAC,KAAA,mCAAAC,MAAA,0CAA+GC","file":"path---test-angularjs-app-mock-backend-1805a58ade53f43658e9.js","sourcesContent":["webpackJsonp([127801211302029],{\n\n/***/ 347:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>The aim of this article is to show you, how I mock my API when I test my angularjs applications.</p>\\n<h2>Why mock your API call?</h2>\\n<ul>\\n<li>Testing client can be done in separation of the server</li>\\n<li>Because third-party API which is non usable in test</li>\\n<li>I won't test things twice (server and client)</li>\\n</ul>\\n<h2>How to mock your API</h2>\\n<p>First you will need to add <a href=\\\"https://github.com/angular/bower-angular-mocks\\\">angular-mock</a> script to your application.</p>\\n<pre><code class=\\\"language-shell\\\"># Installation (via bower)\\nbower install angular-mocks \\n\\n# And include this script in your angularjs app\\n&#x3C;script type=\\\"text/javascript\\\" src=\\\"bower_components/angular-mocks/angular-mocks.js\\\">&#x3C;/script>\\n</code></pre>\\n<p>You can now start to mock you http request.</p>\\n<h3>The hard way</h3>\\n<p>You can mock backend with protractor using the <code>browser.addMockModule()</code> method.</p>\\n<p>A test example :</p>\\n<pre><code class=\\\"language-javascript\\\">describe('A test', function() {\\n        it('should diplay raoul in result' ,function() {\\n            browser.addMockModule('httpBackendMock',\\n            function() {\\n                angular.module('httpBackendMock',\\n               ['mainApp', 'ngMockE2E'])\\n                .run(function($httpBackend) {\\n                    $httpBackend.whenGET('/results').respond('raoul');    \\n                });\\n            }); \\n\\n            browser.get('/');\\n            var result = element(by.binding('result'));\\n            expect(result.getText()).toEqual('raoul');\\n        });\\n})\\n</code></pre>\\n<p>Inconveniences:</p>\\n<ul>\\n<li>Verbose</li>\\n<li>Your fixtures can be injected only once in a scenario.</li>\\n</ul>\\n<h3>The easy way</h3>\\n<p>I developped a tiny nodejs module to make your http mock easier : <a href=\\\"https://github.com/nchaulet/httpbackend\\\">HttpBackend</a>.</p>\\n<p>So now install the httpbackend module <code>npm install httpbackend</code></p>\\n<p>And then test :</p>\\n<pre><code class=\\\"language-javascript\\\">var HttpBackend = require('httpbackend');\\nvar backend;\\n\\ndescribe('Test Http backend methods', function() {\\n    beforeEach(function() {\\n        backend = new HttpBackend(browser);\\n    });\\n    \\n    afterEach(function() {\\n        backend.clear();\\n    });\\n\\n    it('Test whenGET with string response', function() {\\n        backend.whenGET(/result/).respond('raoul');\\n\\n        browser.get('/');\\n\\n        var result = element(by.binding('result'));\\n        expect(result.getText()).toEqual('raoul');\\n    });\\n});\\n</code></pre>\\n<p>Avantages:</p>\\n<ul>\\n<li>Syntax </li>\\n<li>You can redefine fixtures during a scenario.</li>\\n</ul>\\n<h2>Resources</h2>\\n<p><a href=\\\"https://docs.angularjs.org/api/ngMockE2E/service/$httpBackend\\\">https://docs.angularjs.org/api/ngMockE2E/service/$httpBackend</a>\\n<a href=\\\"https://github.com/nchaulet/httpbackend\\\">https://github.com/nchaulet/httpbackend</a></p>\",\"frontmatter\":{\"date\":\"2014-06-01\",\"path\":\"/test-angularjs-app-mock-backend\",\"title\":\"Angular e2e tests, Mock your backend\"}}},\"pathContext\":{}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---test-angularjs-app-mock-backend-1805a58ade53f43658e9.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>The aim of this article is to show you, how I mock my API when I test my angularjs applications.</p>\\n<h2>Why mock your API call?</h2>\\n<ul>\\n<li>Testing client can be done in separation of the server</li>\\n<li>Because third-party API which is non usable in test</li>\\n<li>I won't test things twice (server and client)</li>\\n</ul>\\n<h2>How to mock your API</h2>\\n<p>First you will need to add <a href=\\\"https://github.com/angular/bower-angular-mocks\\\">angular-mock</a> script to your application.</p>\\n<pre><code class=\\\"language-shell\\\"># Installation (via bower)\\nbower install angular-mocks \\n\\n# And include this script in your angularjs app\\n&#x3C;script type=\\\"text/javascript\\\" src=\\\"bower_components/angular-mocks/angular-mocks.js\\\">&#x3C;/script>\\n</code></pre>\\n<p>You can now start to mock you http request.</p>\\n<h3>The hard way</h3>\\n<p>You can mock backend with protractor using the <code>browser.addMockModule()</code> method.</p>\\n<p>A test example :</p>\\n<pre><code class=\\\"language-javascript\\\">describe('A test', function() {\\n        it('should diplay raoul in result' ,function() {\\n            browser.addMockModule('httpBackendMock',\\n            function() {\\n                angular.module('httpBackendMock',\\n               ['mainApp', 'ngMockE2E'])\\n                .run(function($httpBackend) {\\n                    $httpBackend.whenGET('/results').respond('raoul');    \\n                });\\n            }); \\n\\n            browser.get('/');\\n            var result = element(by.binding('result'));\\n            expect(result.getText()).toEqual('raoul');\\n        });\\n})\\n</code></pre>\\n<p>Inconveniences:</p>\\n<ul>\\n<li>Verbose</li>\\n<li>Your fixtures can be injected only once in a scenario.</li>\\n</ul>\\n<h3>The easy way</h3>\\n<p>I developped a tiny nodejs module to make your http mock easier : <a href=\\\"https://github.com/nchaulet/httpbackend\\\">HttpBackend</a>.</p>\\n<p>So now install the httpbackend module <code>npm install httpbackend</code></p>\\n<p>And then test :</p>\\n<pre><code class=\\\"language-javascript\\\">var HttpBackend = require('httpbackend');\\nvar backend;\\n\\ndescribe('Test Http backend methods', function() {\\n    beforeEach(function() {\\n        backend = new HttpBackend(browser);\\n    });\\n    \\n    afterEach(function() {\\n        backend.clear();\\n    });\\n\\n    it('Test whenGET with string response', function() {\\n        backend.whenGET(/result/).respond('raoul');\\n\\n        browser.get('/');\\n\\n        var result = element(by.binding('result'));\\n        expect(result.getText()).toEqual('raoul');\\n    });\\n});\\n</code></pre>\\n<p>Avantages:</p>\\n<ul>\\n<li>Syntax </li>\\n<li>You can redefine fixtures during a scenario.</li>\\n</ul>\\n<h2>Resources</h2>\\n<p><a href=\\\"https://docs.angularjs.org/api/ngMockE2E/service/$httpBackend\\\">https://docs.angularjs.org/api/ngMockE2E/service/$httpBackend</a>\\n<a href=\\\"https://github.com/nchaulet/httpbackend\\\">https://github.com/nchaulet/httpbackend</a></p>\",\"frontmatter\":{\"date\":\"2014-06-01\",\"path\":\"/test-angularjs-app-mock-backend\",\"title\":\"Angular e2e tests, Mock your backend\"}}},\"pathContext\":{}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/test-angularjs-app-mock-backend.json\n// module id = 347\n// module chunks = 127801211302029"],"sourceRoot":""}