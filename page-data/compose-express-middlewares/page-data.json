{"componentChunkName":"component---src-templates-post-js","path":"/compose-express-middlewares","webpackCompilationHash":"5019f7a1d3295729ec89","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://www.nchaulet.fr"}},"mdx":{"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"path\": \"/compose-express-middlewares\",\n  \"date\": \"2018-10-30\",\n  \"title\": \"Compose express middlewares\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Function composition is a great tool, to allow to create a more isolated function with clear responsibility and single purpose. Function composition allows combining these functions to create a more complex one.\"), mdx(\"p\", null, \"This pattern can also be used to express middlewares. This allows having more isolated middlewares, easier to test. And to expose a composed middleware that can guarantee that a middleware is going to be called after another one.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const express = require('express');\\n\\nfunction middleware1(req, res, next) {\\n  req.var1 = logic1();\\n}\\nfunction middleware2(req, res, next) {\\n  req.var2 = logic2(req.var1);\\n}\\nfunction middleware3(req, res, next) {\\n  req.var3 = logic3(req.var1, req.vqr2);\\n}\\n\\nconst myFinalMiddleware = express.Router().use(middleware1, middleware2, middleware3);\\n\")), mdx(\"p\", null, \"And you can use your middleware after like any other middleware\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const app = express();\\napp.use(myFinalMiddleware);\\n\")), mdx(\"p\", null, \"This tips allow you to have thinner middleware with single responsability.\"));\n}\nMDXContent.isMDXComponent = true;"},"frontmatter":{"date":"2018-10-30","path":"/compose-express-middlewares","title":"Compose express middlewares"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}