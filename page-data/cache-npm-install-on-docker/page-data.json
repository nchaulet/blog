{"componentChunkName":"component---src-templates-post-js","path":"/cache-npm-install-on-docker","webpackCompilationHash":"9567cb6a6a0de401fe51","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://www.nchaulet.fr"}},"mdx":{"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"path\": \"/cache-npm-install-on-docker\",\n  \"date\": \"2015-09-13\",\n  \"title\": \"Cache npm install on docker\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Docker had a great cache mechanism, and you can easily use it to improve your image build time.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/images/2015/09/docker-node.jpeg\",\n    \"alt\": null\n  }))), mdx(\"h2\", null, \"Node Application Dockerfile\"), mdx(\"p\", null, \"You can use the below Dockerfile to run a simple nodejs application, but for every image build the command \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm install\"), \" will be executed.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-Dockerfile\"\n  }), \"FROM node\\n\\nADD . /code\\nWORKDIR /code\\n\\nRUN npm install\\n\\nCMD npm start\\n\")), mdx(\"h2\", null, \"Use docker layer cache\"), mdx(\"p\", null, \"A great optimization to the previous Dockerfile is to run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm install\"), \" before adding your codebase. For this you will have to add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \" and to run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nmp install\"), \", before you add your codebase.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-Dockerfile\"\n  }), \"FROM node\\n\\nADD ./package.json /code/package.json\\nWORKDIR /code\\nRUN npm install\\n\\nADD . /code\\n\\nCMD npm start\\n\")), mdx(\"h3\", null, \"Conclusion\"), mdx(\"p\", null, \"Now your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm install\"), \" are cached and will be rerunned only if your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \" changes, making your image build time faster.\"));\n}\nMDXContent.isMDXComponent = true;"},"frontmatter":{"date":"2015-09-13","path":"/cache-npm-install-on-docker","title":"Cache npm install on docker"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}