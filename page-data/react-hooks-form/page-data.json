{"componentChunkName":"component---src-templates-post-js","path":"/react-hooks-form","webpackCompilationHash":"5019f7a1d3295729ec89","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://www.nchaulet.fr"}},"mdx":{"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"path\": \"/react-hooks-form\",\n  \"date\": \"2019-05-28\",\n  \"title\": \"Using React hooks in forms\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"According to Dan Abramov and lot of users of the React API, Hooks are the future of React. Let's see how we can use them to manage a Form.\"), mdx(\"p\", null, \"We are going to use a very common form to register a user: two inputs an email and a password.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }), \"<form>\\n  <input placeholder=\\\"email\\\" />\\n  <input type=\\\"password\\\" placeholder=\\\"password\\\" />\\n  <button type=\\\"button\\\">register</button>\\n</form>\\n\")), mdx(\"p\", null, \"Let's capture our input, for that we are going to create a hook \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useInput\"), \" that is going to manage the state of our input.\\nOn submit we are going to trigger an alert with the content of our form.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"live=true noInline=true\",\n    \"live\": \"true\",\n    \"noInline\": \"true\"\n  }), \"function useInput(defaultValue = \\\"\\\") {\\n  const [value, setValue] = useState(defaultValue);\\n\\n  const onChange = (e) => setValue(e.target.value);\\n\\n  return {\\n    value,\\n    onChange\\n  };\\n}\\n\\nfunction Form() {\\n  const emailInput = useInput();\\n  const passwordInput = useInput();\\n\\n  const onSubmit = useCallback((e) => {\\n    e.preventDefault();\\n    alert(`\\n      Submit Form\\n      -----------\\n      email: ${emailInput.value}\\n      password: ${passwordInput.value}\\n    `);\\n  });\\n\\n  return (\\n    <form onSubmit={onSubmit}>\\n      <input {...emailInput} placeholder=\\\"email\\\" />\\n      <input {...passwordInput} type=\\\"password\\\" placeholder=\\\"password\\\" />\\n      <button>register</button>\\n    </form>\\n  );\\n}\\nrender(Form);\\n\")), mdx(\"p\", null, \"And add some validation, here we are using the Constraint API (\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation#Constraint_API's_element.setCustomValidity()\"\n  }), \"see doc\"), \").\"), mdx(\"p\", null, \"The Constraint API is currently not totally supported by Internet Explorer.\\nThis API allow to mark an input as invalid with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setCustomValidity()\"), \" method, you need to trigger the display of the message with a call to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"reportValidity()\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"live=true noInline=true\",\n    \"live\": \"true\",\n    \"noInline\": \"true\"\n  }), \"function useInput(validateRegex = null, validateErrorMessage = null) {\\n  const defaultValue = \\\"\\\";\\n  const [value, setValue] = useState(defaultValue);\\n\\n  const onChange = (e) => {\\n    setValue(e.target.value)\\n    if (validateRegex) {\\n      if (e.target.value.match(validateRegex)) {\\n        e.target.setCustomValidity(\\\"\\\");\\n      } else {\\n        e.target.setCustomValidity(validateErrorMessage);\\n      }\\n      e.target.reportValidity();\\n    }\\n  };\\n\\n\\n  return {\\n    value,\\n    onChange,\\n    required: true\\n  };\\n}\\nconst GMAIL_EMAIL_REGEX =  /^(([^<>()\\\\[\\\\]\\\\\\\\.,;:\\\\s@\\\"]+(\\\\.[^<>()\\\\[\\\\]\\\\\\\\.,;:\\\\s@\\\"]+)*)|(\\\".+\\\"))@gmail\\\\.com$/;\\n\\nconst PASSWORD_REGEX = /^[^\\\\s-]{3,}$/;\\n\\nfunction Form() {\\n  const emailInput = useInput(GMAIL_EMAIL_REGEX, \\\"Not a valid email! support only @gmail.com address\\\");\\n  const passwordInput = useInput(PASSWORD_REGEX, \\\"Password should be at least 3 non whitespace caracters\\\");\\n\\n  const onSubmit = useCallback((e) => {\\n    e.preventDefault();\\n    alert(`\\n      Submit Form\\n      -----------\\n      email: ${emailInput.value}\\n      password: ${passwordInput.value}\\n    `);\\n  });\\n\\n  return (\\n    <form onSubmit={onSubmit}>\\n      <input {...emailInput} placeholder=\\\"email\\\" />\\n      <input {...passwordInput} type=\\\"password\\\" placeholder=\\\"password\\\" />\\n      <button>register</button>\\n    </form>\\n  );\\n}\\nrender(Form);\\n\")));\n}\nMDXContent.isMDXComponent = true;"},"frontmatter":{"date":"2019-05-28","path":"/react-hooks-form","title":"Using React hooks in forms"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}